/* eslint-disable */
/* generated by definy. Do not edit! */



/**
 * UserId, ProjectIdなどのIdをバイナリ形式にエンコードする
 */
export const encodeId = (value: string): ReadonlyArray<number> => (Array.from({ length: 16 }, (_: undefined, i: number): number => (Number.parseInt(value.slice(i * 2, i * 2 + 2), 16))));


/**
 * バイナリ形式をUserId, ProjectIdなどのIdにデコードする
 * @param index バイナリを読み込み開始位置
 * @param binary バイナリ
 */
export const decodeId = (index: number, binary: Uint8Array): { readonly result: string; readonly nextIndex: number } => ({ result: [...binary.slice(index, index + 16)].map((n: number): string => (n.toString(16).padStart(2, "0"))).join(""), nextIndex: index + 16 });


/**
 * ImageTokenなどのTokenをバイナリ形式にエンコードする
 */
export const encodeToken = (value: string): ReadonlyArray<number> => (Array.from({ length: 32 }, (_: undefined, i: number): number => (Number.parseInt(value.slice(i * 2, i * 2 + 2), 16))));


/**
 * バイナリ形式をImageTokenなどのTokenにエンコードする
 * @param index バイナリを読み込み開始位置
 * @param binary バイナリ
 */
export const decodeToken = (index: number, binary: Uint8Array): { readonly result: string; readonly nextIndex: number } => ({ result: [...binary.slice(index, index + 32)].map((n: number): string => (n.toString(16).padStart(2, "0"))).join(""), nextIndex: index + 32 });


/**
 * バイナリと相互変換するための関数
 */
export type Codec<T extends unknown> = { readonly encode: (a: T) => ReadonlyArray<number>; readonly decode: (a: number, b: Uint8Array) => { readonly result: T; readonly nextIndex: number } };


/**
 * 生徒が質問を答えるAPI. 上書き保存のみ.
 * isConfirm を true に指定すると, 確定できる (クラス作成者に通知)
 * @typePartId 0a0b773d897753c99d8f83dd165b1156
 */
export type AnswerQuestionParameter = { readonly accountToken: AccountToken; readonly questionId: QuestionId; readonly classId: ClassId; 
/**
 * 回答文
 */
readonly answerText: String; 
/**
 * 確定するかどうか
 */
readonly isConfirm: Bool };


/**
 * @typePartId 1340453d1a567d2946e13d1269de28c2
 */
export type Int32 = number;


/**
 * @typePartId 1973a012c346cb6acbb40c0dd8dcd558
 */
export type String = string;


/**
 * クラス管理者が, 生徒の答えた回答を取得するときのパラメーター
 * @typePartId 1c629fe7fc9cbb7dec554a2bfc96579a
 */
export type GetStudentAnswerTreeParameter = { 
/**
 * クラス管理者のアカウントトークン
 */
readonly accountToken: AccountToken; readonly classId: ClassId; 
/**
 * 生徒のアカウントID
 */
readonly studentAccountId: AccountId };


/**
 * 自分自身が答えた回答と確定状態
 * @typePartId 1e3cb3f728d3edcf3d32f2cec7426f66
 */
export type StudentAnswerAndIsConfirm = { 
/**
 * 回答
 */
readonly text: String; 
/**
 * 完了しているかどうか
 */
readonly isConfirm: Bool };


/**
 * 同じクラスの他の生徒の回答を取得するときのパラメーター
 * @typePartId 24899053ff6d82588e6956a52a3c1948
 */
export type GetAnswersFromOtherStudentsParameter = { readonly accountToken: AccountToken; readonly classId: ClassId; readonly questionId: QuestionId };


/**
 * @typePartId 2aced1ad90c13f7bec7aec383f672fe0
 */
export type ImageHashValue = string & { readonly _imageHashValue: never };


/**
 * ログインした時に取得する自分のアカウントに関するデータ
 * @typePartId 2d6ee02ca9b9d1fa852217cd8e722844
 */
export type AccountData = { 
/**
 * アカウント情報
 */
readonly account: Account; 
/**
 * 作成したプログラム
 */
readonly createdProgramList: List<Program>; 
/**
 * 作成したクラス
 */
readonly createdClassList: List<AdminClass>; 
/**
 * 参加したクラス
 */
readonly joinedClassList: List<ParticipantClass> };


/**
 * ソーシャルログインのコールバックURL から得られる, アカウントトークンを得るための, code と state
 * @typePartId 3f53a9bf1e76b7ba560eeda263dc99d2
 */
export type CodeAndState = { readonly code: String; readonly state: String };


/**
 * 生徒が取得する クラスの質問の木構造と, 自分の回答と確定状態
 * @typePartId 42aeb3bb2b0710009cfcf20362b32864
 */
export type StudentSelfQuestionTree = { 
/**
 * 質問ID
 */
readonly questionId: QuestionId; 
/**
 * 質問文
 */
readonly questionText: String; 
/**
 * 子の質問
 */
readonly children: List<StudentSelfQuestionTree>; 
/**
 * 自分の答えた回答と確定状態. まだ答えていない場合は, None
 */
readonly answer: Option<StudentAnswerAndIsConfirm> };


/**
 * アカウントID と クラスID
 * @typePartId 4639fcd9f6b1fd0fbe2a10962c0f6ae8
 */
export type AccountIdAndClassId = { readonly accountId: AccountId; readonly classId: ClassId };


/**
 * @typePartId 47bbe818062456a8c3aa11c8f59c364c
 */
export type NotificationEvent = { readonly _: "NewCommentToMyAnswer"; readonly answerIdData: AnswerIdData } | { readonly _: "NewCommentInCreatedClass"; readonly answerIdData: AnswerIdData } | { readonly _: "ConfirmAnswerInCreatedClass"; readonly answerIdData: AnswerIdData };


/**
 * 通知 1つ1つ
 * @typePartId 4f5d8b0c864b435780eb4114e04d3e12
 */
export type Notification = { 
/**
 * イベントの種類と内容
 */
readonly event: NotificationEvent; 
/**
 * 既読かどうか
 */
readonly done: Bool };


/**
 * 質問
 * @typePartId 5024e10d28f2dfac877b924e1c7aaed0
 */
export type Question = { 
/**
 * 質問文
 */
readonly name: String; 
/**
 * 親の質問
 */
readonly parent: Option<QuestionId>; 
/**
 * 所属するプログラム
 */
readonly programId: ProgramId; 
/**
 * 質問を識別するID
 */
readonly id: QuestionId };


/**
 * 参加者(ゲスト, 生徒)から見たクラスの情報
 * @typePartId 53adb5fed4af4f01e7bf2c08c167a4ac
 */
export type ParticipantClass = { 
/**
 * クラスID
 */
readonly id: ClassId; 
/**
 * クラス名
 */
readonly name: String; 
/**
 * 作成したアカウントのID
 */
readonly createAccountId: AccountId; 
/**
 * 質問のプログラムID
 */
readonly programId: ProgramId; 
/**
 * クラスへの関わり方
 */
readonly role: ClassParticipantRole };


/**
 * クラスを作成するためのパラメータ
 * @typePartId 54ced35f9b23ea54d066fc31c4c0e589
 */
export type CreateClassParameter = { 
/**
 * クラスを作成するアカウントのアカウントトークン
 */
readonly accountToken: AccountToken; 
/**
 * プログラムID
 */
readonly programId: ProgramId; 
/**
 * クラス名
 */
readonly className: String };


/**
 * @typePartId 5932fbc5b30fdb25717c40ed63092aeb
 */
export type AdminStudentAnswerPageParameter = { readonly classId: ClassId; readonly studentAccountId: AccountId; readonly questionId: QuestionId };


/**
 * プログラムを作るときに必要になるパラメータ
 * @typePartId 5f7128e3f1abb40e12bc8bf9f9b64159
 */
export type CreateProgramParameter = { 
/**
 * プログラム名
 */
readonly programName: String; 
/**
 * アカウントトークン
 */
readonly accountToken: AccountToken };


/**
 * @typePartId 623f5bcda082b879673ce3fae33ff73e
 */
export type GetFeedbackParameter = { readonly accountToken: AccountToken; readonly questionId: QuestionId; readonly classId: ClassId; readonly answerStudentId: AccountId };


/**
 * @typePartId 6930f80e4e0e3dad38287e08a3a832d7
 */
export type NewQuestionParameter = { readonly programId: ProgramId; readonly parent: Option<QuestionId> };


/**
 * 質問を作成するときのパラメータ
 * @typePartId 718be7c1b95ac6c5038e75265223c1f6
 */
export type CreateQuestionParamter = { 
/**
 * アカウントトークン
 */
readonly accountToken: AccountToken; 
/**
 * プログラムID
 */
readonly programId: ProgramId; 
/**
 * 親の質問ID
 */
readonly parent: Option<QuestionId>; 
/**
 * 質問文
 */
readonly questionText: String };


/**
 * @typePartId 74ad6c4ddcd42dc5052becec9c3978fa
 */
export type NotificationId = string & { readonly _notificationId: never };


/**
 * 通知を既読にするAPIのパラメータ
 * @typePartId 7b28884b3f24d567783144c03079420a
 */
export type NotificationSetDoneParameter = { readonly accountToken: AccountToken; readonly notificationId: NotificationId };


/**
 * @typePartId 7e5003924c95d01064ec74f5fd735ca6
 */
export type Account = { readonly name: String; readonly iconHash: ImageHashValue; readonly id: AccountId };


/**
 * 質問を作成するプログラム. 複数のクラスを開催できる.
 * @typePartId 830072ccaa2d061ee3c4a4ddeffc393c
 */
export type Program = { 
/**
 * プログラムを識別するID
 */
readonly id: ProgramId; 
/**
 * プログラム名
 */
readonly name: String; 
/**
 * プログラム作成者 かつ 管理者
 */
readonly createAccountId: AccountId };


/**
 * @typePartId 8794bbcffd8e385491eb6457620b8722
 */
export type Unit = "UnitValue";


/**
 * アカウントトークンとQUESTの場所
 * @typePartId 89826638cf102c52e00444347fbc484d
 */
export type AccountTokenAndLocation = { readonly accountToken: AccountToken; readonly location: Location };


/**
 * @typePartId 8f2d8c4ad1c6dc74691eaf186dc84a0e
 */
export type Option<value extends unknown> = { readonly _: "Some"; readonly value: value } | { readonly _: "None" };


/**
 * @typePartId 953c70df36809ebd87703da47fbd7e41
 */
export type QuestionId = string & { readonly _questionId: never };


/**
 * @typePartId 9aa6158ecc8bb71ca25a1f02a5001604
 */
export type AccountTokenAndProgramId = { readonly accountToken: AccountToken; readonly programId: ProgramId };


/**
 * @typePartId a5c4ceae4af6d68040a6bd46548cbf40
 */
export type User = { readonly name: String; readonly age: Int32 };


/**
 * クラスの参加者を取得するときに必要なパラメータ
 * @typePartId a60eb55d26148910c09c40082b839cd0
 */
export type AccountTokenAndClassId = { 
/**
 * アカウントトークン
 */
readonly accountToken: AccountToken; 
/**
 * クラスID
 */
readonly classId: ClassId };


/**
 * @typePartId a678f667362c1d8e27c5dad5a63dc56a
 */
export type StudentClassInvitationToken = string & { readonly _studentClassInvitationToken: never };


/**
 * 日時.
 * `0001-01-01T00:00:00.000Z to 9999-12-31T23:59:59.999Z`
 * 最小単位はミリ秒. ミリ秒の求め方は `day*1000*60*60*24 + millisecond`
 * @typePartId b6f8c8143e4165285d53c6f2beecaba6
 */
export type DateTime = { 
/**
 * `1970-01-01` からの経過日数. マイナスになることもある
 */
readonly day: Int32; 
/**
 * 日にちの中のミリ秒. `0 to 86399999 (=1000*60*60*24-1)
 */
readonly millisecond: Int32 };


/**
 * @typePartId b75b40bd491f9a62c25da778f28ba6d8
 */
export type Participant = { readonly account: Account; readonly role: ClassParticipantRole };


/**
 * ページの場所を表現する
 * @typePartId b8fd5d17464422869c1b16b945f09c2a
 */
export type Location = { readonly _: "Top" } | { readonly _: "Setting" } | { readonly _: "NewProgram" } | { readonly _: "Program"; readonly programId: ProgramId } | { readonly _: "NewQuestion"; readonly newQuestionParameter: NewQuestionParameter } | { readonly _: "AdminQuestion"; readonly programIdAndQuestionId: ProgramIdAndQuestionId } | { readonly _: "Class"; readonly classId: ClassId } | { readonly _: "NewClass"; readonly programId: ProgramId } | { readonly _: "ClassInvitation"; readonly studentClassInvitationToken: StudentClassInvitationToken } | { readonly _: "EditQuestion"; readonly programIdAndQuestionId: ProgramIdAndQuestionId } | { readonly _: "AdminStudent"; readonly accountIdAndClassId: AccountIdAndClassId } | { readonly _: "AdminStudentAnswer"; readonly adminStudentAnswerPageParameter: AdminStudentAnswerPageParameter } | { readonly _: "StudentAnswer"; readonly answerIdData: AnswerIdData } | { readonly _: "Notification" };


/**
 * @typePartId ba3d6ee02b7347a6bec71e0ad05d9735
 */
export type ProgramIdAndQuestionId = { readonly programId: ProgramId; readonly questionId: QuestionId };


/**
 * クラスへの参加の関わり方
 * @typePartId c9b64678a2a7f4a2901b632dd8bbcca7
 */
export type ClassParticipantRole = "Student" | "Guest";


/**
 * @typePartId cd46c4730bd2258c1622db8db7eecf66
 */
export type List<element extends unknown> = ReadonlyArray<element>;


/**
 * Quest の URL のすべてのパターン
 * @typePartId cec26a35f885ad14c558580d38ef2db2
 */
export type UrlData = { readonly _: "Normal"; readonly location: Location } | { readonly _: "LogInCallback"; readonly codeAndState: CodeAndState };


/**
 * @typePartId d40c498b5a48f08411741ded2484d838
 */
export type AnswerIdData = { readonly classId: ClassId; readonly questionId: QuestionId; readonly answerStudentId: AccountId };


/**
 * 生徒が答えた確定済みの回答
 * @typePartId d5e1f676bc1550e196892116141b7cb7
 */
export type ConfirmedAnswer = { readonly questionId: QuestionId; 
/**
 * 回答の文章
 */
readonly answer: String };


/**
 * @typePartId daa5e4c4cd13d4fc2f087ab5532e9639
 */
export type Bool = boolean;


/**
 * 質問を編集するときのパラメータ
 * @typePartId db01aebce8186d3f5913cacd45b46518
 */
export type EditQuestionParameter = { readonly accountToken: AccountToken; readonly questionId: QuestionId; 
/**
 * 新たな質問文
 */
readonly name: String; 
/**
 * 親の質問
 */
readonly parentId: Option<QuestionId> };


/**
 * アカウントトークンのハッシュ値. データベースに保存する用
 * @typePartId db380c6ac2db887ce3224266cf646cb3
 */
export type AccountTokenHashValue = string & { readonly _accountTokenHashValue: never };


/**
 * @typePartId dc8aedd2ba2bf6afa73b7d854cd1b45e
 */
export type AccountToken = string & { readonly _accountToken: never };


/**
 * フィードバックのID.
 * 1つの回答に対する複数のフィードバック
 * @typePartId ddc436ab9f9477953f7f5fdf6b5fe8cc
 */
export type FeedbackId = string & { readonly _feedbackId: never };


/**
 * @typePartId e0d22ba37d182c0def8905e0dd44b56a
 */
export type AccountId = string & { readonly _accountId: never };


/**
 * questの クラス
 * @typePartId e66d2a5734b3ca58faca10d9a72dbf72
 */
export type AdminClass = { 
/**
 * クラスID
 */
readonly id: ClassId; readonly name: String; 
/**
 * 属するプログラムID
 */
readonly programId: ProgramId; 
/**
 * 招待トークン
 */
readonly studentInvitationToken: StudentClassInvitationToken };


/**
 * @typePartId ed19a165de909edd77618b1e45f31933
 */
export type TypePartId = string & { readonly _typePartId: never };


/**
 * 生徒(質問を答え, フィードバックするひと) としてクラスに参加するためのパラメータ
 * @typePartId f15b8d36ac1436b4212c0d25613c99c0
 */
export type JoinClassAsStudentParameter = { 
/**
 * 参加するアカウントのアカウントトークン
 */
readonly accountToken: AccountToken; 
/**
 * 招待トークン
 */
readonly classInvitationToken: StudentClassInvitationToken };


/**
 * 他の生徒の回答
 * @typePartId f175351a9bf7d3ba293a525a1b20f08f
 */
export type AnswersFromOtherStudent = { readonly studentId: AccountId; readonly answerText: String };


/**
 * @typePartId f2c5ecf28ee97364a0a738490f09de29
 */
export type Feedback = { readonly accountId: AccountId; readonly message: String; readonly createDateTime: DateTime; readonly id: FeedbackId };


/**
 * フィードバックを追加する
 * @typePartId f8d4a640f7f6a2087fb6dd5f905aa0fd
 */
export type AddFeedbackParameter = { readonly accountToken: AccountToken; readonly questionId: QuestionId; readonly classId: ClassId; readonly answerStudentId: AccountId; readonly message: String };


/**
 * @typePartId fc3e89643aabfa642a21562a55be7f00
 */
export type Result<okValue extends unknown, errorValue extends unknown> = { readonly _: "Ok"; readonly okValue: okValue } | { readonly _: "Error"; readonly errorValue: errorValue };


/**
 * @typePartId fc44e7c43fc49d64473e6b1efa7589e2
 */
export type ClassId = string & { readonly _classId: never };


/**
 * @typePartId fcb5274a1228c7dc890710bed16a3051
 */
export type ProgramId = string & { readonly _programId: never };


/**
 * 生徒が質問を答えるAPI. 上書き保存のみ.
 * isConfirm を true に指定すると, 確定できる (クラス作成者に通知)
 * @typePartId 0a0b773d897753c99d8f83dd165b1156
 */
export const AnswerQuestionParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AnswerQuestionParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: AnswerQuestionParameter) => AnswerQuestionParameter } = { typePartId: "0a0b773d897753c99d8f83dd165b1156" as TypePartId, helper: (answerQuestionParameter: AnswerQuestionParameter): AnswerQuestionParameter => answerQuestionParameter, codec: { encode: (value: AnswerQuestionParameter): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(QuestionId.codec.encode(value.questionId)).concat(ClassId.codec.encode(value.classId)).concat(String.codec.encode(value.answerText)).concat(Bool.codec.encode(value.isConfirm))), decode: (index: number, binary: Uint8Array): { readonly result: AnswerQuestionParameter; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const questionIdAndNextIndex: { readonly result: QuestionId; readonly nextIndex: number } = QuestionId.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  const classIdAndNextIndex: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(questionIdAndNextIndex.nextIndex, binary);
  const answerTextAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(classIdAndNextIndex.nextIndex, binary);
  const isConfirmAndNextIndex: { readonly result: Bool; readonly nextIndex: number } = Bool.codec.decode(answerTextAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, questionId: questionIdAndNextIndex.result, classId: classIdAndNextIndex.result, answerText: answerTextAndNextIndex.result, isConfirm: isConfirmAndNextIndex.result }, nextIndex: isConfirmAndNextIndex.nextIndex };
} } };


/**
 * @typePartId 1340453d1a567d2946e13d1269de28c2
 */
export const Int32: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<Int32> } = { typePartId: "1340453d1a567d2946e13d1269de28c2" as TypePartId, codec: { encode: (value: Int32): ReadonlyArray<number> => {
  let rest: number = value | 0;
  const result: Array<number> = [];
  while (true) {
    const byte: number = rest & 127;
    rest >>= 7;
    if (rest === 0 && (byte & 64) === 0 || rest === -1 && (byte & 64) !== 0) {
      result.push(byte);
      return result;
    }
    result.push(byte | 128);
  }
}, decode: (index: number, binary: Uint8Array): { readonly result: Int32; readonly nextIndex: number } => {
  let result: number = 0;
  let offset: number = 0;
  while (true) {
    const byte: number | undefined = binary[index + offset];
    if (byte === undefined) {
      throw new Error("invalid byte in decode int32");
    }
    result |= (byte & 127) << offset * 7;
    offset += 1;
    if ((128 & byte) === 0) {
      if (offset * 7 < 32 && (byte & 64) !== 0) {
        return { result: result | ~0 << offset * 7, nextIndex: index + offset };
      }
      return { result, nextIndex: index + offset };
    }
  }
} } };


/**
 * @typePartId 1973a012c346cb6acbb40c0dd8dcd558
 */
export const String: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<String> } = { typePartId: "1973a012c346cb6acbb40c0dd8dcd558" as TypePartId, codec: { encode: (value: String): ReadonlyArray<number> => {
  const result: ReadonlyArray<number> = [...new TextEncoder().encode(value)];
  return Int32.codec.encode(result.length).concat(result);
}, decode: (index: number, binary: Uint8Array): { readonly result: String; readonly nextIndex: number } => {
  const length: { readonly result: number; readonly nextIndex: number } = Int32.codec.decode(index, binary);
  const nextIndex: number = length.nextIndex + length.result;
  const textBinary: Uint8Array = binary.slice(length.nextIndex, nextIndex);
  return { result: new TextDecoder().decode(textBinary), nextIndex };
} } };


/**
 * クラス管理者が, 生徒の答えた回答を取得するときのパラメーター
 * @typePartId 1c629fe7fc9cbb7dec554a2bfc96579a
 */
export const GetStudentAnswerTreeParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<GetStudentAnswerTreeParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: GetStudentAnswerTreeParameter) => GetStudentAnswerTreeParameter } = { typePartId: "1c629fe7fc9cbb7dec554a2bfc96579a" as TypePartId, helper: (getStudentAnswerTreeParameter: GetStudentAnswerTreeParameter): GetStudentAnswerTreeParameter => getStudentAnswerTreeParameter, codec: { encode: (value: GetStudentAnswerTreeParameter): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(ClassId.codec.encode(value.classId)).concat(AccountId.codec.encode(value.studentAccountId))), decode: (index: number, binary: Uint8Array): { readonly result: GetStudentAnswerTreeParameter; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const classIdAndNextIndex: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  const studentAccountIdAndNextIndex: { readonly result: AccountId; readonly nextIndex: number } = AccountId.codec.decode(classIdAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, classId: classIdAndNextIndex.result, studentAccountId: studentAccountIdAndNextIndex.result }, nextIndex: studentAccountIdAndNextIndex.nextIndex };
} } };


/**
 * 自分自身が答えた回答と確定状態
 * @typePartId 1e3cb3f728d3edcf3d32f2cec7426f66
 */
export const StudentAnswerAndIsConfirm: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<StudentAnswerAndIsConfirm>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: StudentAnswerAndIsConfirm) => StudentAnswerAndIsConfirm } = { typePartId: "1e3cb3f728d3edcf3d32f2cec7426f66" as TypePartId, helper: (studentAnswerAndIsConfirm: StudentAnswerAndIsConfirm): StudentAnswerAndIsConfirm => studentAnswerAndIsConfirm, codec: { encode: (value: StudentAnswerAndIsConfirm): ReadonlyArray<number> => (String.codec.encode(value.text).concat(Bool.codec.encode(value.isConfirm))), decode: (index: number, binary: Uint8Array): { readonly result: StudentAnswerAndIsConfirm; readonly nextIndex: number } => {
  const textAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(index, binary);
  const isConfirmAndNextIndex: { readonly result: Bool; readonly nextIndex: number } = Bool.codec.decode(textAndNextIndex.nextIndex, binary);
  return { result: { text: textAndNextIndex.result, isConfirm: isConfirmAndNextIndex.result }, nextIndex: isConfirmAndNextIndex.nextIndex };
} } };


/**
 * 同じクラスの他の生徒の回答を取得するときのパラメーター
 * @typePartId 24899053ff6d82588e6956a52a3c1948
 */
export const GetAnswersFromOtherStudentsParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<GetAnswersFromOtherStudentsParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: GetAnswersFromOtherStudentsParameter) => GetAnswersFromOtherStudentsParameter } = { typePartId: "24899053ff6d82588e6956a52a3c1948" as TypePartId, helper: (getAnswersFromOtherStudentsParameter: GetAnswersFromOtherStudentsParameter): GetAnswersFromOtherStudentsParameter => getAnswersFromOtherStudentsParameter, codec: { encode: (value: GetAnswersFromOtherStudentsParameter): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(ClassId.codec.encode(value.classId)).concat(QuestionId.codec.encode(value.questionId))), decode: (index: number, binary: Uint8Array): { readonly result: GetAnswersFromOtherStudentsParameter; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const classIdAndNextIndex: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  const questionIdAndNextIndex: { readonly result: QuestionId; readonly nextIndex: number } = QuestionId.codec.decode(classIdAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, classId: classIdAndNextIndex.result, questionId: questionIdAndNextIndex.result }, nextIndex: questionIdAndNextIndex.nextIndex };
} } };


/**
 * @typePartId 2aced1ad90c13f7bec7aec383f672fe0
 */
export const ImageHashValue: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<ImageHashValue>; 
/**
 * 文字列から変換する
 */
readonly fromString: (a: string) => ImageHashValue } = { typePartId: "2aced1ad90c13f7bec7aec383f672fe0" as TypePartId, codec: { encode: (value: ImageHashValue): ReadonlyArray<number> => (encodeToken(value)), decode: (index: number, binary: Uint8Array): { readonly result: ImageHashValue; readonly nextIndex: number } => (decodeToken(index, binary) as { readonly result: ImageHashValue; readonly nextIndex: number }) }, fromString: (str: string): ImageHashValue => (str as ImageHashValue) };


/**
 * ログインした時に取得する自分のアカウントに関するデータ
 * @typePartId 2d6ee02ca9b9d1fa852217cd8e722844
 */
export const AccountData: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AccountData>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: AccountData) => AccountData } = { typePartId: "2d6ee02ca9b9d1fa852217cd8e722844" as TypePartId, helper: (accountData: AccountData): AccountData => accountData, codec: { encode: (value: AccountData): ReadonlyArray<number> => (Account.codec.encode(value.account).concat(List.codec(Program.codec).encode(value.createdProgramList)).concat(List.codec(AdminClass.codec).encode(value.createdClassList)).concat(List.codec(ParticipantClass.codec).encode(value.joinedClassList))), decode: (index: number, binary: Uint8Array): { readonly result: AccountData; readonly nextIndex: number } => {
  const accountAndNextIndex: { readonly result: Account; readonly nextIndex: number } = Account.codec.decode(index, binary);
  const createdProgramListAndNextIndex: { readonly result: List<Program>; readonly nextIndex: number } = List.codec(Program.codec).decode(accountAndNextIndex.nextIndex, binary);
  const createdClassListAndNextIndex: { readonly result: List<AdminClass>; readonly nextIndex: number } = List.codec(AdminClass.codec).decode(createdProgramListAndNextIndex.nextIndex, binary);
  const joinedClassListAndNextIndex: { readonly result: List<ParticipantClass>; readonly nextIndex: number } = List.codec(ParticipantClass.codec).decode(createdClassListAndNextIndex.nextIndex, binary);
  return { result: { account: accountAndNextIndex.result, createdProgramList: createdProgramListAndNextIndex.result, createdClassList: createdClassListAndNextIndex.result, joinedClassList: joinedClassListAndNextIndex.result }, nextIndex: joinedClassListAndNextIndex.nextIndex };
} } };


/**
 * ソーシャルログインのコールバックURL から得られる, アカウントトークンを得るための, code と state
 * @typePartId 3f53a9bf1e76b7ba560eeda263dc99d2
 */
export const CodeAndState: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<CodeAndState>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: CodeAndState) => CodeAndState } = { typePartId: "3f53a9bf1e76b7ba560eeda263dc99d2" as TypePartId, helper: (codeAndState: CodeAndState): CodeAndState => codeAndState, codec: { encode: (value: CodeAndState): ReadonlyArray<number> => (String.codec.encode(value.code).concat(String.codec.encode(value.state))), decode: (index: number, binary: Uint8Array): { readonly result: CodeAndState; readonly nextIndex: number } => {
  const codeAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(index, binary);
  const stateAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(codeAndNextIndex.nextIndex, binary);
  return { result: { code: codeAndNextIndex.result, state: stateAndNextIndex.result }, nextIndex: stateAndNextIndex.nextIndex };
} } };


/**
 * 生徒が取得する クラスの質問の木構造と, 自分の回答と確定状態
 * @typePartId 42aeb3bb2b0710009cfcf20362b32864
 */
export const StudentSelfQuestionTree: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<StudentSelfQuestionTree>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: StudentSelfQuestionTree) => StudentSelfQuestionTree } = { typePartId: "42aeb3bb2b0710009cfcf20362b32864" as TypePartId, helper: (studentSelfQuestionTree: StudentSelfQuestionTree): StudentSelfQuestionTree => studentSelfQuestionTree, codec: { encode: (value: StudentSelfQuestionTree): ReadonlyArray<number> => (QuestionId.codec.encode(value.questionId).concat(String.codec.encode(value.questionText)).concat(List.codec(StudentSelfQuestionTree.codec).encode(value.children)).concat(Option.codec(StudentAnswerAndIsConfirm.codec).encode(value.answer))), decode: (index: number, binary: Uint8Array): { readonly result: StudentSelfQuestionTree; readonly nextIndex: number } => {
  const questionIdAndNextIndex: { readonly result: QuestionId; readonly nextIndex: number } = QuestionId.codec.decode(index, binary);
  const questionTextAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(questionIdAndNextIndex.nextIndex, binary);
  const childrenAndNextIndex: { readonly result: List<StudentSelfQuestionTree>; readonly nextIndex: number } = List.codec(StudentSelfQuestionTree.codec).decode(questionTextAndNextIndex.nextIndex, binary);
  const answerAndNextIndex: { readonly result: Option<StudentAnswerAndIsConfirm>; readonly nextIndex: number } = Option.codec(StudentAnswerAndIsConfirm.codec).decode(childrenAndNextIndex.nextIndex, binary);
  return { result: { questionId: questionIdAndNextIndex.result, questionText: questionTextAndNextIndex.result, children: childrenAndNextIndex.result, answer: answerAndNextIndex.result }, nextIndex: answerAndNextIndex.nextIndex };
} } };


/**
 * アカウントID と クラスID
 * @typePartId 4639fcd9f6b1fd0fbe2a10962c0f6ae8
 */
export const AccountIdAndClassId: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AccountIdAndClassId>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: AccountIdAndClassId) => AccountIdAndClassId } = { typePartId: "4639fcd9f6b1fd0fbe2a10962c0f6ae8" as TypePartId, helper: (accountIdAndClassId: AccountIdAndClassId): AccountIdAndClassId => accountIdAndClassId, codec: { encode: (value: AccountIdAndClassId): ReadonlyArray<number> => (AccountId.codec.encode(value.accountId).concat(ClassId.codec.encode(value.classId))), decode: (index: number, binary: Uint8Array): { readonly result: AccountIdAndClassId; readonly nextIndex: number } => {
  const accountIdAndNextIndex: { readonly result: AccountId; readonly nextIndex: number } = AccountId.codec.decode(index, binary);
  const classIdAndNextIndex: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(accountIdAndNextIndex.nextIndex, binary);
  return { result: { accountId: accountIdAndNextIndex.result, classId: classIdAndNextIndex.result }, nextIndex: classIdAndNextIndex.nextIndex };
} } };


/**
 * @typePartId 47bbe818062456a8c3aa11c8f59c364c
 */
export const NotificationEvent: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<NotificationEvent>; 
/**
 * 自分の回答に対してあらたなコメントがついた
 */
readonly NewCommentToMyAnswer: (a: AnswerIdData) => NotificationEvent; 
/**
 * 自分のクラスの生徒の回答に, あらたなコメントがついた
 */
readonly NewCommentInCreatedClass: (a: AnswerIdData) => NotificationEvent; 
/**
 * 自分のクラスの生徒にあたらたに確定した回答が追加された
 */
readonly ConfirmAnswerInCreatedClass: (a: AnswerIdData) => NotificationEvent } = { NewCommentToMyAnswer: (answerIdData: AnswerIdData): NotificationEvent => ({ _: "NewCommentToMyAnswer", answerIdData }), NewCommentInCreatedClass: (answerIdData: AnswerIdData): NotificationEvent => ({ _: "NewCommentInCreatedClass", answerIdData }), ConfirmAnswerInCreatedClass: (answerIdData: AnswerIdData): NotificationEvent => ({ _: "ConfirmAnswerInCreatedClass", answerIdData }), typePartId: "47bbe818062456a8c3aa11c8f59c364c" as TypePartId, codec: { encode: (value: NotificationEvent): ReadonlyArray<number> => {
  switch (value._) {
    case "NewCommentToMyAnswer": {
      return [0].concat(AnswerIdData.codec.encode(value.answerIdData));
    }
    case "NewCommentInCreatedClass": {
      return [1].concat(AnswerIdData.codec.encode(value.answerIdData));
    }
    case "ConfirmAnswerInCreatedClass": {
      return [2].concat(AnswerIdData.codec.encode(value.answerIdData));
    }
  }
}, decode: (index: number, binary: Uint8Array): { readonly result: NotificationEvent; readonly nextIndex: number } => {
  const patternIndex: { readonly result: number; readonly nextIndex: number } = Int32.codec.decode(index, binary);
  if (patternIndex.result === 0) {
    const result: { readonly result: AnswerIdData; readonly nextIndex: number } = AnswerIdData.codec.decode(patternIndex.nextIndex, binary);
    return { result: NotificationEvent.NewCommentToMyAnswer(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 1) {
    const result: { readonly result: AnswerIdData; readonly nextIndex: number } = AnswerIdData.codec.decode(patternIndex.nextIndex, binary);
    return { result: NotificationEvent.NewCommentInCreatedClass(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 2) {
    const result: { readonly result: AnswerIdData; readonly nextIndex: number } = AnswerIdData.codec.decode(patternIndex.nextIndex, binary);
    return { result: NotificationEvent.ConfirmAnswerInCreatedClass(result.result), nextIndex: result.nextIndex };
  }
  throw new Error("存在しないパターンを指定された 型を更新してください");
} } };


/**
 * 通知 1つ1つ
 * @typePartId 4f5d8b0c864b435780eb4114e04d3e12
 */
export const Notification: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<Notification>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: Notification) => Notification } = { typePartId: "4f5d8b0c864b435780eb4114e04d3e12" as TypePartId, helper: (notification: Notification): Notification => notification, codec: { encode: (value: Notification): ReadonlyArray<number> => (NotificationEvent.codec.encode(value.event).concat(Bool.codec.encode(value.done))), decode: (index: number, binary: Uint8Array): { readonly result: Notification; readonly nextIndex: number } => {
  const eventAndNextIndex: { readonly result: NotificationEvent; readonly nextIndex: number } = NotificationEvent.codec.decode(index, binary);
  const doneAndNextIndex: { readonly result: Bool; readonly nextIndex: number } = Bool.codec.decode(eventAndNextIndex.nextIndex, binary);
  return { result: { event: eventAndNextIndex.result, done: doneAndNextIndex.result }, nextIndex: doneAndNextIndex.nextIndex };
} } };


/**
 * 質問
 * @typePartId 5024e10d28f2dfac877b924e1c7aaed0
 */
export const Question: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<Question>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: Question) => Question } = { typePartId: "5024e10d28f2dfac877b924e1c7aaed0" as TypePartId, helper: (question: Question): Question => question, codec: { encode: (value: Question): ReadonlyArray<number> => (String.codec.encode(value.name).concat(Option.codec(QuestionId.codec).encode(value.parent)).concat(ProgramId.codec.encode(value.programId)).concat(QuestionId.codec.encode(value.id))), decode: (index: number, binary: Uint8Array): { readonly result: Question; readonly nextIndex: number } => {
  const nameAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(index, binary);
  const parentAndNextIndex: { readonly result: Option<QuestionId>; readonly nextIndex: number } = Option.codec(QuestionId.codec).decode(nameAndNextIndex.nextIndex, binary);
  const programIdAndNextIndex: { readonly result: ProgramId; readonly nextIndex: number } = ProgramId.codec.decode(parentAndNextIndex.nextIndex, binary);
  const idAndNextIndex: { readonly result: QuestionId; readonly nextIndex: number } = QuestionId.codec.decode(programIdAndNextIndex.nextIndex, binary);
  return { result: { name: nameAndNextIndex.result, parent: parentAndNextIndex.result, programId: programIdAndNextIndex.result, id: idAndNextIndex.result }, nextIndex: idAndNextIndex.nextIndex };
} } };


/**
 * 参加者(ゲスト, 生徒)から見たクラスの情報
 * @typePartId 53adb5fed4af4f01e7bf2c08c167a4ac
 */
export const ParticipantClass: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<ParticipantClass>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: ParticipantClass) => ParticipantClass } = { typePartId: "53adb5fed4af4f01e7bf2c08c167a4ac" as TypePartId, helper: (participantClass: ParticipantClass): ParticipantClass => participantClass, codec: { encode: (value: ParticipantClass): ReadonlyArray<number> => (ClassId.codec.encode(value.id).concat(String.codec.encode(value.name)).concat(AccountId.codec.encode(value.createAccountId)).concat(ProgramId.codec.encode(value.programId)).concat(ClassParticipantRole.codec.encode(value.role))), decode: (index: number, binary: Uint8Array): { readonly result: ParticipantClass; readonly nextIndex: number } => {
  const idAndNextIndex: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(index, binary);
  const nameAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(idAndNextIndex.nextIndex, binary);
  const createAccountIdAndNextIndex: { readonly result: AccountId; readonly nextIndex: number } = AccountId.codec.decode(nameAndNextIndex.nextIndex, binary);
  const programIdAndNextIndex: { readonly result: ProgramId; readonly nextIndex: number } = ProgramId.codec.decode(createAccountIdAndNextIndex.nextIndex, binary);
  const roleAndNextIndex: { readonly result: ClassParticipantRole; readonly nextIndex: number } = ClassParticipantRole.codec.decode(programIdAndNextIndex.nextIndex, binary);
  return { result: { id: idAndNextIndex.result, name: nameAndNextIndex.result, createAccountId: createAccountIdAndNextIndex.result, programId: programIdAndNextIndex.result, role: roleAndNextIndex.result }, nextIndex: roleAndNextIndex.nextIndex };
} } };


/**
 * クラスを作成するためのパラメータ
 * @typePartId 54ced35f9b23ea54d066fc31c4c0e589
 */
export const CreateClassParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<CreateClassParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: CreateClassParameter) => CreateClassParameter } = { typePartId: "54ced35f9b23ea54d066fc31c4c0e589" as TypePartId, helper: (createClassParameter: CreateClassParameter): CreateClassParameter => createClassParameter, codec: { encode: (value: CreateClassParameter): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(ProgramId.codec.encode(value.programId)).concat(String.codec.encode(value.className))), decode: (index: number, binary: Uint8Array): { readonly result: CreateClassParameter; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const programIdAndNextIndex: { readonly result: ProgramId; readonly nextIndex: number } = ProgramId.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  const classNameAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(programIdAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, programId: programIdAndNextIndex.result, className: classNameAndNextIndex.result }, nextIndex: classNameAndNextIndex.nextIndex };
} } };


/**
 * @typePartId 5932fbc5b30fdb25717c40ed63092aeb
 */
export const AdminStudentAnswerPageParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AdminStudentAnswerPageParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: AdminStudentAnswerPageParameter) => AdminStudentAnswerPageParameter } = { typePartId: "5932fbc5b30fdb25717c40ed63092aeb" as TypePartId, helper: (adminStudentAnswerPageParameter: AdminStudentAnswerPageParameter): AdminStudentAnswerPageParameter => adminStudentAnswerPageParameter, codec: { encode: (value: AdminStudentAnswerPageParameter): ReadonlyArray<number> => (ClassId.codec.encode(value.classId).concat(AccountId.codec.encode(value.studentAccountId)).concat(QuestionId.codec.encode(value.questionId))), decode: (index: number, binary: Uint8Array): { readonly result: AdminStudentAnswerPageParameter; readonly nextIndex: number } => {
  const classIdAndNextIndex: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(index, binary);
  const studentAccountIdAndNextIndex: { readonly result: AccountId; readonly nextIndex: number } = AccountId.codec.decode(classIdAndNextIndex.nextIndex, binary);
  const questionIdAndNextIndex: { readonly result: QuestionId; readonly nextIndex: number } = QuestionId.codec.decode(studentAccountIdAndNextIndex.nextIndex, binary);
  return { result: { classId: classIdAndNextIndex.result, studentAccountId: studentAccountIdAndNextIndex.result, questionId: questionIdAndNextIndex.result }, nextIndex: questionIdAndNextIndex.nextIndex };
} } };


/**
 * プログラムを作るときに必要になるパラメータ
 * @typePartId 5f7128e3f1abb40e12bc8bf9f9b64159
 */
export const CreateProgramParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<CreateProgramParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: CreateProgramParameter) => CreateProgramParameter } = { typePartId: "5f7128e3f1abb40e12bc8bf9f9b64159" as TypePartId, helper: (createProgramParameter: CreateProgramParameter): CreateProgramParameter => createProgramParameter, codec: { encode: (value: CreateProgramParameter): ReadonlyArray<number> => (String.codec.encode(value.programName).concat(AccountToken.codec.encode(value.accountToken))), decode: (index: number, binary: Uint8Array): { readonly result: CreateProgramParameter; readonly nextIndex: number } => {
  const programNameAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(index, binary);
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(programNameAndNextIndex.nextIndex, binary);
  return { result: { programName: programNameAndNextIndex.result, accountToken: accountTokenAndNextIndex.result }, nextIndex: accountTokenAndNextIndex.nextIndex };
} } };


/**
 * @typePartId 623f5bcda082b879673ce3fae33ff73e
 */
export const GetFeedbackParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<GetFeedbackParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: GetFeedbackParameter) => GetFeedbackParameter } = { typePartId: "623f5bcda082b879673ce3fae33ff73e" as TypePartId, helper: (getFeedbackParameter: GetFeedbackParameter): GetFeedbackParameter => getFeedbackParameter, codec: { encode: (value: GetFeedbackParameter): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(QuestionId.codec.encode(value.questionId)).concat(ClassId.codec.encode(value.classId)).concat(AccountId.codec.encode(value.answerStudentId))), decode: (index: number, binary: Uint8Array): { readonly result: GetFeedbackParameter; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const questionIdAndNextIndex: { readonly result: QuestionId; readonly nextIndex: number } = QuestionId.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  const classIdAndNextIndex: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(questionIdAndNextIndex.nextIndex, binary);
  const answerStudentIdAndNextIndex: { readonly result: AccountId; readonly nextIndex: number } = AccountId.codec.decode(classIdAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, questionId: questionIdAndNextIndex.result, classId: classIdAndNextIndex.result, answerStudentId: answerStudentIdAndNextIndex.result }, nextIndex: answerStudentIdAndNextIndex.nextIndex };
} } };


/**
 * @typePartId 6930f80e4e0e3dad38287e08a3a832d7
 */
export const NewQuestionParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<NewQuestionParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: NewQuestionParameter) => NewQuestionParameter } = { typePartId: "6930f80e4e0e3dad38287e08a3a832d7" as TypePartId, helper: (newQuestionParameter: NewQuestionParameter): NewQuestionParameter => newQuestionParameter, codec: { encode: (value: NewQuestionParameter): ReadonlyArray<number> => (ProgramId.codec.encode(value.programId).concat(Option.codec(QuestionId.codec).encode(value.parent))), decode: (index: number, binary: Uint8Array): { readonly result: NewQuestionParameter; readonly nextIndex: number } => {
  const programIdAndNextIndex: { readonly result: ProgramId; readonly nextIndex: number } = ProgramId.codec.decode(index, binary);
  const parentAndNextIndex: { readonly result: Option<QuestionId>; readonly nextIndex: number } = Option.codec(QuestionId.codec).decode(programIdAndNextIndex.nextIndex, binary);
  return { result: { programId: programIdAndNextIndex.result, parent: parentAndNextIndex.result }, nextIndex: parentAndNextIndex.nextIndex };
} } };


/**
 * 質問を作成するときのパラメータ
 * @typePartId 718be7c1b95ac6c5038e75265223c1f6
 */
export const CreateQuestionParamter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<CreateQuestionParamter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: CreateQuestionParamter) => CreateQuestionParamter } = { typePartId: "718be7c1b95ac6c5038e75265223c1f6" as TypePartId, helper: (createQuestionParamter: CreateQuestionParamter): CreateQuestionParamter => createQuestionParamter, codec: { encode: (value: CreateQuestionParamter): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(ProgramId.codec.encode(value.programId)).concat(Option.codec(QuestionId.codec).encode(value.parent)).concat(String.codec.encode(value.questionText))), decode: (index: number, binary: Uint8Array): { readonly result: CreateQuestionParamter; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const programIdAndNextIndex: { readonly result: ProgramId; readonly nextIndex: number } = ProgramId.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  const parentAndNextIndex: { readonly result: Option<QuestionId>; readonly nextIndex: number } = Option.codec(QuestionId.codec).decode(programIdAndNextIndex.nextIndex, binary);
  const questionTextAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(parentAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, programId: programIdAndNextIndex.result, parent: parentAndNextIndex.result, questionText: questionTextAndNextIndex.result }, nextIndex: questionTextAndNextIndex.nextIndex };
} } };


/**
 * @typePartId 74ad6c4ddcd42dc5052becec9c3978fa
 */
export const NotificationId: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<NotificationId>; 
/**
 * 文字列から変換する
 */
readonly fromString: (a: string) => NotificationId } = { typePartId: "74ad6c4ddcd42dc5052becec9c3978fa" as TypePartId, codec: { encode: (value: NotificationId): ReadonlyArray<number> => (encodeId(value)), decode: (index: number, binary: Uint8Array): { readonly result: NotificationId; readonly nextIndex: number } => (decodeId(index, binary) as { readonly result: NotificationId; readonly nextIndex: number }) }, fromString: (str: string): NotificationId => (str as NotificationId) };


/**
 * 通知を既読にするAPIのパラメータ
 * @typePartId 7b28884b3f24d567783144c03079420a
 */
export const NotificationSetDoneParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<NotificationSetDoneParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: NotificationSetDoneParameter) => NotificationSetDoneParameter } = { typePartId: "7b28884b3f24d567783144c03079420a" as TypePartId, helper: (notificationSetDoneParameter: NotificationSetDoneParameter): NotificationSetDoneParameter => notificationSetDoneParameter, codec: { encode: (value: NotificationSetDoneParameter): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(NotificationId.codec.encode(value.notificationId))), decode: (index: number, binary: Uint8Array): { readonly result: NotificationSetDoneParameter; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const notificationIdAndNextIndex: { readonly result: NotificationId; readonly nextIndex: number } = NotificationId.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, notificationId: notificationIdAndNextIndex.result }, nextIndex: notificationIdAndNextIndex.nextIndex };
} } };


/**
 * @typePartId 7e5003924c95d01064ec74f5fd735ca6
 */
export const Account: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<Account>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: Account) => Account } = { typePartId: "7e5003924c95d01064ec74f5fd735ca6" as TypePartId, helper: (account: Account): Account => account, codec: { encode: (value: Account): ReadonlyArray<number> => (String.codec.encode(value.name).concat(ImageHashValue.codec.encode(value.iconHash)).concat(AccountId.codec.encode(value.id))), decode: (index: number, binary: Uint8Array): { readonly result: Account; readonly nextIndex: number } => {
  const nameAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(index, binary);
  const iconHashAndNextIndex: { readonly result: ImageHashValue; readonly nextIndex: number } = ImageHashValue.codec.decode(nameAndNextIndex.nextIndex, binary);
  const idAndNextIndex: { readonly result: AccountId; readonly nextIndex: number } = AccountId.codec.decode(iconHashAndNextIndex.nextIndex, binary);
  return { result: { name: nameAndNextIndex.result, iconHash: iconHashAndNextIndex.result, id: idAndNextIndex.result }, nextIndex: idAndNextIndex.nextIndex };
} } };


/**
 * 質問を作成するプログラム. 複数のクラスを開催できる.
 * @typePartId 830072ccaa2d061ee3c4a4ddeffc393c
 */
export const Program: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<Program>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: Program) => Program } = { typePartId: "830072ccaa2d061ee3c4a4ddeffc393c" as TypePartId, helper: (program: Program): Program => program, codec: { encode: (value: Program): ReadonlyArray<number> => (ProgramId.codec.encode(value.id).concat(String.codec.encode(value.name)).concat(AccountId.codec.encode(value.createAccountId))), decode: (index: number, binary: Uint8Array): { readonly result: Program; readonly nextIndex: number } => {
  const idAndNextIndex: { readonly result: ProgramId; readonly nextIndex: number } = ProgramId.codec.decode(index, binary);
  const nameAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(idAndNextIndex.nextIndex, binary);
  const createAccountIdAndNextIndex: { readonly result: AccountId; readonly nextIndex: number } = AccountId.codec.decode(nameAndNextIndex.nextIndex, binary);
  return { result: { id: idAndNextIndex.result, name: nameAndNextIndex.result, createAccountId: createAccountIdAndNextIndex.result }, nextIndex: createAccountIdAndNextIndex.nextIndex };
} } };


/**
 * @typePartId 8794bbcffd8e385491eb6457620b8722
 */
export const Unit: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<Unit>; readonly UnitValue: Unit } = { UnitValue: "UnitValue", typePartId: "8794bbcffd8e385491eb6457620b8722" as TypePartId, codec: { encode: (value: Unit): ReadonlyArray<number> => {
  switch (value) {
    case "UnitValue": {
      return [0];
    }
  }
}, decode: (index: number, binary: Uint8Array): { readonly result: Unit; readonly nextIndex: number } => {
  const patternIndex: { readonly result: number; readonly nextIndex: number } = Int32.codec.decode(index, binary);
  if (patternIndex.result === 0) {
    return { result: Unit.UnitValue, nextIndex: patternIndex.nextIndex };
  }
  throw new Error("存在しないパターンを指定された 型を更新してください");
} } };


/**
 * アカウントトークンとQUESTの場所
 * @typePartId 89826638cf102c52e00444347fbc484d
 */
export const AccountTokenAndLocation: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AccountTokenAndLocation>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: AccountTokenAndLocation) => AccountTokenAndLocation } = { typePartId: "89826638cf102c52e00444347fbc484d" as TypePartId, helper: (accountTokenAndLocation: AccountTokenAndLocation): AccountTokenAndLocation => accountTokenAndLocation, codec: { encode: (value: AccountTokenAndLocation): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(Location.codec.encode(value.location))), decode: (index: number, binary: Uint8Array): { readonly result: AccountTokenAndLocation; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const locationAndNextIndex: { readonly result: Location; readonly nextIndex: number } = Location.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, location: locationAndNextIndex.result }, nextIndex: locationAndNextIndex.nextIndex };
} } };


/**
 * @typePartId 8f2d8c4ad1c6dc74691eaf186dc84a0e
 */
export const Option: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: <value extends unknown>(a: Codec<value>) => Codec<Option<value>>; readonly Some: <value extends unknown>(a: value) => Option<value>; readonly None: <value extends unknown>() => Option<value> } = { Some: <value extends unknown>(value: value): Option<value> => ({ _: "Some", value }), None: <value extends unknown>(): Option<value> => ({ _: "None" }), typePartId: "8f2d8c4ad1c6dc74691eaf186dc84a0e" as TypePartId, codec: <value extends unknown>(valueCodec: Codec<value>): Codec<Option<value>> => ({ encode: (value: Option<value>): ReadonlyArray<number> => {
  switch (value._) {
    case "Some": {
      return [0].concat(valueCodec.encode(value.value));
    }
    case "None": {
      return [1];
    }
  }
}, decode: (index: number, binary: Uint8Array): { readonly result: Option<value>; readonly nextIndex: number } => {
  const patternIndex: { readonly result: number; readonly nextIndex: number } = Int32.codec.decode(index, binary);
  if (patternIndex.result === 0) {
    const result: { readonly result: value; readonly nextIndex: number } = valueCodec.decode(patternIndex.nextIndex, binary);
    return { result: Option.Some(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 1) {
    return { result: Option.None(), nextIndex: patternIndex.nextIndex };
  }
  throw new Error("存在しないパターンを指定された 型を更新してください");
} }) };


/**
 * @typePartId 953c70df36809ebd87703da47fbd7e41
 */
export const QuestionId: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<QuestionId>; 
/**
 * 文字列から変換する
 */
readonly fromString: (a: string) => QuestionId } = { typePartId: "953c70df36809ebd87703da47fbd7e41" as TypePartId, codec: { encode: (value: QuestionId): ReadonlyArray<number> => (encodeId(value)), decode: (index: number, binary: Uint8Array): { readonly result: QuestionId; readonly nextIndex: number } => (decodeId(index, binary) as { readonly result: QuestionId; readonly nextIndex: number }) }, fromString: (str: string): QuestionId => (str as QuestionId) };


/**
 * @typePartId 9aa6158ecc8bb71ca25a1f02a5001604
 */
export const AccountTokenAndProgramId: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AccountTokenAndProgramId>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: AccountTokenAndProgramId) => AccountTokenAndProgramId } = { typePartId: "9aa6158ecc8bb71ca25a1f02a5001604" as TypePartId, helper: (accountTokenAndProgramId: AccountTokenAndProgramId): AccountTokenAndProgramId => accountTokenAndProgramId, codec: { encode: (value: AccountTokenAndProgramId): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(ProgramId.codec.encode(value.programId))), decode: (index: number, binary: Uint8Array): { readonly result: AccountTokenAndProgramId; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const programIdAndNextIndex: { readonly result: ProgramId; readonly nextIndex: number } = ProgramId.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, programId: programIdAndNextIndex.result }, nextIndex: programIdAndNextIndex.nextIndex };
} } };


/**
 * @typePartId a5c4ceae4af6d68040a6bd46548cbf40
 */
export const User: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<User>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: User) => User } = { typePartId: "a5c4ceae4af6d68040a6bd46548cbf40" as TypePartId, helper: (user: User): User => user, codec: { encode: (value: User): ReadonlyArray<number> => (String.codec.encode(value.name).concat(Int32.codec.encode(value.age))), decode: (index: number, binary: Uint8Array): { readonly result: User; readonly nextIndex: number } => {
  const nameAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(index, binary);
  const ageAndNextIndex: { readonly result: Int32; readonly nextIndex: number } = Int32.codec.decode(nameAndNextIndex.nextIndex, binary);
  return { result: { name: nameAndNextIndex.result, age: ageAndNextIndex.result }, nextIndex: ageAndNextIndex.nextIndex };
} } };


/**
 * クラスの参加者を取得するときに必要なパラメータ
 * @typePartId a60eb55d26148910c09c40082b839cd0
 */
export const AccountTokenAndClassId: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AccountTokenAndClassId>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: AccountTokenAndClassId) => AccountTokenAndClassId } = { typePartId: "a60eb55d26148910c09c40082b839cd0" as TypePartId, helper: (accountTokenAndClassId: AccountTokenAndClassId): AccountTokenAndClassId => accountTokenAndClassId, codec: { encode: (value: AccountTokenAndClassId): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(ClassId.codec.encode(value.classId))), decode: (index: number, binary: Uint8Array): { readonly result: AccountTokenAndClassId; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const classIdAndNextIndex: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, classId: classIdAndNextIndex.result }, nextIndex: classIdAndNextIndex.nextIndex };
} } };


/**
 * @typePartId a678f667362c1d8e27c5dad5a63dc56a
 */
export const StudentClassInvitationToken: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<StudentClassInvitationToken>; 
/**
 * 文字列から変換する
 */
readonly fromString: (a: string) => StudentClassInvitationToken } = { typePartId: "a678f667362c1d8e27c5dad5a63dc56a" as TypePartId, codec: { encode: (value: StudentClassInvitationToken): ReadonlyArray<number> => (encodeToken(value)), decode: (index: number, binary: Uint8Array): { readonly result: StudentClassInvitationToken; readonly nextIndex: number } => (decodeToken(index, binary) as { readonly result: StudentClassInvitationToken; readonly nextIndex: number }) }, fromString: (str: string): StudentClassInvitationToken => (str as StudentClassInvitationToken) };


/**
 * 日時.
 * `0001-01-01T00:00:00.000Z to 9999-12-31T23:59:59.999Z`
 * 最小単位はミリ秒. ミリ秒の求め方は `day*1000*60*60*24 + millisecond`
 * @typePartId b6f8c8143e4165285d53c6f2beecaba6
 */
export const DateTime: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<DateTime>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: DateTime) => DateTime } = { typePartId: "b6f8c8143e4165285d53c6f2beecaba6" as TypePartId, helper: (dateTime: DateTime): DateTime => dateTime, codec: { encode: (value: DateTime): ReadonlyArray<number> => (Int32.codec.encode(value.day).concat(Int32.codec.encode(value.millisecond))), decode: (index: number, binary: Uint8Array): { readonly result: DateTime; readonly nextIndex: number } => {
  const dayAndNextIndex: { readonly result: Int32; readonly nextIndex: number } = Int32.codec.decode(index, binary);
  const millisecondAndNextIndex: { readonly result: Int32; readonly nextIndex: number } = Int32.codec.decode(dayAndNextIndex.nextIndex, binary);
  return { result: { day: dayAndNextIndex.result, millisecond: millisecondAndNextIndex.result }, nextIndex: millisecondAndNextIndex.nextIndex };
} } };


/**
 * @typePartId b75b40bd491f9a62c25da778f28ba6d8
 */
export const Participant: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<Participant>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: Participant) => Participant } = { typePartId: "b75b40bd491f9a62c25da778f28ba6d8" as TypePartId, helper: (participant: Participant): Participant => participant, codec: { encode: (value: Participant): ReadonlyArray<number> => (Account.codec.encode(value.account).concat(ClassParticipantRole.codec.encode(value.role))), decode: (index: number, binary: Uint8Array): { readonly result: Participant; readonly nextIndex: number } => {
  const accountAndNextIndex: { readonly result: Account; readonly nextIndex: number } = Account.codec.decode(index, binary);
  const roleAndNextIndex: { readonly result: ClassParticipantRole; readonly nextIndex: number } = ClassParticipantRole.codec.decode(accountAndNextIndex.nextIndex, binary);
  return { result: { account: accountAndNextIndex.result, role: roleAndNextIndex.result }, nextIndex: roleAndNextIndex.nextIndex };
} } };


/**
 * ページの場所を表現する
 * @typePartId b8fd5d17464422869c1b16b945f09c2a
 */
export const Location: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<Location>; 
/**
 * トップページ
 */
readonly Top: Location; 
/**
 * 設定ページ. アカウントの情報やログアウトできる
 */
readonly Setting: Location; 
/**
 * プログラム作成ページ
 */
readonly NewProgram: Location; 
/**
 * プログラム詳細ページ
 */
readonly Program: (a: ProgramId) => Location; 
/**
 * 管理者の質問作成ページ
 */
readonly NewQuestion: (a: NewQuestionParameter) => Location; 
/**
 * 管理者の質問詳細ページ
 */
readonly AdminQuestion: (a: ProgramIdAndQuestionId) => Location; 
/**
 * クラスの詳細ページ. クラスを作成者か, 参加者かによって見た目が変わる
 */
readonly Class: (a: ClassId) => Location; 
/**
 * クラス作成ページ
 */
readonly NewClass: (a: ProgramId) => Location; 
/**
 * クラスの招待URL
 */
readonly ClassInvitation: (a: StudentClassInvitationToken) => Location; 
/**
 * 質問編集画面
 */
readonly EditQuestion: (a: ProgramIdAndQuestionId) => Location; 
/**
 * クラスに参加している生徒の詳細ページ
 */
readonly AdminStudent: (a: AccountIdAndClassId) => Location; 
/**
 * 生徒の確定された回答画面
 */
readonly AdminStudentAnswer: (a: AdminStudentAnswerPageParameter) => Location; 
/**
 * 生徒自身の回答確認 編集画面. フィードバック, 他の人の回答確認もできる
 */
readonly StudentAnswer: (a: AnswerIdData) => Location; 
/**
 * 通知ページ
 */
readonly Notification: Location } = { Top: { _: "Top" }, Setting: { _: "Setting" }, NewProgram: { _: "NewProgram" }, Program: (programId: ProgramId): Location => ({ _: "Program", programId }), NewQuestion: (newQuestionParameter: NewQuestionParameter): Location => ({ _: "NewQuestion", newQuestionParameter }), AdminQuestion: (programIdAndQuestionId: ProgramIdAndQuestionId): Location => ({ _: "AdminQuestion", programIdAndQuestionId }), Class: (classId: ClassId): Location => ({ _: "Class", classId }), NewClass: (programId: ProgramId): Location => ({ _: "NewClass", programId }), ClassInvitation: (studentClassInvitationToken: StudentClassInvitationToken): Location => ({ _: "ClassInvitation", studentClassInvitationToken }), EditQuestion: (programIdAndQuestionId: ProgramIdAndQuestionId): Location => ({ _: "EditQuestion", programIdAndQuestionId }), AdminStudent: (accountIdAndClassId: AccountIdAndClassId): Location => ({ _: "AdminStudent", accountIdAndClassId }), AdminStudentAnswer: (adminStudentAnswerPageParameter: AdminStudentAnswerPageParameter): Location => ({ _: "AdminStudentAnswer", adminStudentAnswerPageParameter }), StudentAnswer: (answerIdData: AnswerIdData): Location => ({ _: "StudentAnswer", answerIdData }), Notification: { _: "Notification" }, typePartId: "b8fd5d17464422869c1b16b945f09c2a" as TypePartId, codec: { encode: (value: Location): ReadonlyArray<number> => {
  switch (value._) {
    case "Top": {
      return [0];
    }
    case "Setting": {
      return [1];
    }
    case "NewProgram": {
      return [2];
    }
    case "Program": {
      return [3].concat(ProgramId.codec.encode(value.programId));
    }
    case "NewQuestion": {
      return [4].concat(NewQuestionParameter.codec.encode(value.newQuestionParameter));
    }
    case "AdminQuestion": {
      return [5].concat(ProgramIdAndQuestionId.codec.encode(value.programIdAndQuestionId));
    }
    case "Class": {
      return [6].concat(ClassId.codec.encode(value.classId));
    }
    case "NewClass": {
      return [7].concat(ProgramId.codec.encode(value.programId));
    }
    case "ClassInvitation": {
      return [8].concat(StudentClassInvitationToken.codec.encode(value.studentClassInvitationToken));
    }
    case "EditQuestion": {
      return [9].concat(ProgramIdAndQuestionId.codec.encode(value.programIdAndQuestionId));
    }
    case "AdminStudent": {
      return [10].concat(AccountIdAndClassId.codec.encode(value.accountIdAndClassId));
    }
    case "AdminStudentAnswer": {
      return [11].concat(AdminStudentAnswerPageParameter.codec.encode(value.adminStudentAnswerPageParameter));
    }
    case "StudentAnswer": {
      return [12].concat(AnswerIdData.codec.encode(value.answerIdData));
    }
    case "Notification": {
      return [13];
    }
  }
}, decode: (index: number, binary: Uint8Array): { readonly result: Location; readonly nextIndex: number } => {
  const patternIndex: { readonly result: number; readonly nextIndex: number } = Int32.codec.decode(index, binary);
  if (patternIndex.result === 0) {
    return { result: Location.Top, nextIndex: patternIndex.nextIndex };
  }
  if (patternIndex.result === 1) {
    return { result: Location.Setting, nextIndex: patternIndex.nextIndex };
  }
  if (patternIndex.result === 2) {
    return { result: Location.NewProgram, nextIndex: patternIndex.nextIndex };
  }
  if (patternIndex.result === 3) {
    const result: { readonly result: ProgramId; readonly nextIndex: number } = ProgramId.codec.decode(patternIndex.nextIndex, binary);
    return { result: Location.Program(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 4) {
    const result: { readonly result: NewQuestionParameter; readonly nextIndex: number } = NewQuestionParameter.codec.decode(patternIndex.nextIndex, binary);
    return { result: Location.NewQuestion(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 5) {
    const result: { readonly result: ProgramIdAndQuestionId; readonly nextIndex: number } = ProgramIdAndQuestionId.codec.decode(patternIndex.nextIndex, binary);
    return { result: Location.AdminQuestion(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 6) {
    const result: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(patternIndex.nextIndex, binary);
    return { result: Location.Class(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 7) {
    const result: { readonly result: ProgramId; readonly nextIndex: number } = ProgramId.codec.decode(patternIndex.nextIndex, binary);
    return { result: Location.NewClass(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 8) {
    const result: { readonly result: StudentClassInvitationToken; readonly nextIndex: number } = StudentClassInvitationToken.codec.decode(patternIndex.nextIndex, binary);
    return { result: Location.ClassInvitation(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 9) {
    const result: { readonly result: ProgramIdAndQuestionId; readonly nextIndex: number } = ProgramIdAndQuestionId.codec.decode(patternIndex.nextIndex, binary);
    return { result: Location.EditQuestion(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 10) {
    const result: { readonly result: AccountIdAndClassId; readonly nextIndex: number } = AccountIdAndClassId.codec.decode(patternIndex.nextIndex, binary);
    return { result: Location.AdminStudent(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 11) {
    const result: { readonly result: AdminStudentAnswerPageParameter; readonly nextIndex: number } = AdminStudentAnswerPageParameter.codec.decode(patternIndex.nextIndex, binary);
    return { result: Location.AdminStudentAnswer(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 12) {
    const result: { readonly result: AnswerIdData; readonly nextIndex: number } = AnswerIdData.codec.decode(patternIndex.nextIndex, binary);
    return { result: Location.StudentAnswer(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 13) {
    return { result: Location.Notification, nextIndex: patternIndex.nextIndex };
  }
  throw new Error("存在しないパターンを指定された 型を更新してください");
} } };


/**
 * @typePartId ba3d6ee02b7347a6bec71e0ad05d9735
 */
export const ProgramIdAndQuestionId: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<ProgramIdAndQuestionId>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: ProgramIdAndQuestionId) => ProgramIdAndQuestionId } = { typePartId: "ba3d6ee02b7347a6bec71e0ad05d9735" as TypePartId, helper: (programIdAndQuestionId: ProgramIdAndQuestionId): ProgramIdAndQuestionId => programIdAndQuestionId, codec: { encode: (value: ProgramIdAndQuestionId): ReadonlyArray<number> => (ProgramId.codec.encode(value.programId).concat(QuestionId.codec.encode(value.questionId))), decode: (index: number, binary: Uint8Array): { readonly result: ProgramIdAndQuestionId; readonly nextIndex: number } => {
  const programIdAndNextIndex: { readonly result: ProgramId; readonly nextIndex: number } = ProgramId.codec.decode(index, binary);
  const questionIdAndNextIndex: { readonly result: QuestionId; readonly nextIndex: number } = QuestionId.codec.decode(programIdAndNextIndex.nextIndex, binary);
  return { result: { programId: programIdAndNextIndex.result, questionId: questionIdAndNextIndex.result }, nextIndex: questionIdAndNextIndex.nextIndex };
} } };


/**
 * クラスへの参加の関わり方
 * @typePartId c9b64678a2a7f4a2901b632dd8bbcca7
 */
export const ClassParticipantRole: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<ClassParticipantRole>; 
/**
 * 生徒, 質問を答えたり, フィードバックできる人
 */
readonly Student: ClassParticipantRole; 
/**
 * ゲスト
 */
readonly Guest: ClassParticipantRole } = { Student: "Student", Guest: "Guest", typePartId: "c9b64678a2a7f4a2901b632dd8bbcca7" as TypePartId, codec: { encode: (value: ClassParticipantRole): ReadonlyArray<number> => {
  switch (value) {
    case "Student": {
      return [0];
    }
    case "Guest": {
      return [1];
    }
  }
}, decode: (index: number, binary: Uint8Array): { readonly result: ClassParticipantRole; readonly nextIndex: number } => {
  const patternIndex: { readonly result: number; readonly nextIndex: number } = Int32.codec.decode(index, binary);
  if (patternIndex.result === 0) {
    return { result: ClassParticipantRole.Student, nextIndex: patternIndex.nextIndex };
  }
  if (patternIndex.result === 1) {
    return { result: ClassParticipantRole.Guest, nextIndex: patternIndex.nextIndex };
  }
  throw new Error("存在しないパターンを指定された 型を更新してください");
} } };


/**
 * @typePartId cd46c4730bd2258c1622db8db7eecf66
 */
export const List: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: <element extends unknown>(a: Codec<element>) => Codec<List<element>> } = { typePartId: "cd46c4730bd2258c1622db8db7eecf66" as TypePartId, codec: <element extends unknown>(elementCodec: Codec<element>): Codec<List<element>> => ({ encode: (value: List<element>): ReadonlyArray<number> => {
  let result: Array<number> = Int32.codec.encode(value.length) as Array<number>;
  for (const element of value){
    result = result.concat(elementCodec.encode(element));
  }
  return result;
}, decode: (index: number, binary: Uint8Array): { readonly result: List<element>; readonly nextIndex: number } => {
  const lengthResult: { readonly result: number; readonly nextIndex: number } = Int32.codec.decode(index, binary);
  let nextIndex: number = lengthResult.nextIndex;
  const result: Array<element> = [];
  for (let i = 0; i < lengthResult.result; i += 1){
    const resultAndNextIndex: { readonly result: element; readonly nextIndex: number } = elementCodec.decode(nextIndex, binary);
    result.push(resultAndNextIndex.result);
    nextIndex = resultAndNextIndex.nextIndex;
  }
  return { result, nextIndex };
} }) };


/**
 * Quest の URL のすべてのパターン
 * @typePartId cec26a35f885ad14c558580d38ef2db2
 */
export const UrlData: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<UrlData>; 
/**
 * 普通のページ
 */
readonly Normal: (a: Location) => UrlData; 
/**
 * ソーシャルログインしたときに返ってくるURL
 */
readonly LogInCallback: (a: CodeAndState) => UrlData } = { Normal: (location: Location): UrlData => ({ _: "Normal", location }), LogInCallback: (codeAndState: CodeAndState): UrlData => ({ _: "LogInCallback", codeAndState }), typePartId: "cec26a35f885ad14c558580d38ef2db2" as TypePartId, codec: { encode: (value: UrlData): ReadonlyArray<number> => {
  switch (value._) {
    case "Normal": {
      return [0].concat(Location.codec.encode(value.location));
    }
    case "LogInCallback": {
      return [1].concat(CodeAndState.codec.encode(value.codeAndState));
    }
  }
}, decode: (index: number, binary: Uint8Array): { readonly result: UrlData; readonly nextIndex: number } => {
  const patternIndex: { readonly result: number; readonly nextIndex: number } = Int32.codec.decode(index, binary);
  if (patternIndex.result === 0) {
    const result: { readonly result: Location; readonly nextIndex: number } = Location.codec.decode(patternIndex.nextIndex, binary);
    return { result: UrlData.Normal(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 1) {
    const result: { readonly result: CodeAndState; readonly nextIndex: number } = CodeAndState.codec.decode(patternIndex.nextIndex, binary);
    return { result: UrlData.LogInCallback(result.result), nextIndex: result.nextIndex };
  }
  throw new Error("存在しないパターンを指定された 型を更新してください");
} } };


/**
 * @typePartId d40c498b5a48f08411741ded2484d838
 */
export const AnswerIdData: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AnswerIdData>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: AnswerIdData) => AnswerIdData } = { typePartId: "d40c498b5a48f08411741ded2484d838" as TypePartId, helper: (answerIdData: AnswerIdData): AnswerIdData => answerIdData, codec: { encode: (value: AnswerIdData): ReadonlyArray<number> => (ClassId.codec.encode(value.classId).concat(QuestionId.codec.encode(value.questionId)).concat(AccountId.codec.encode(value.answerStudentId))), decode: (index: number, binary: Uint8Array): { readonly result: AnswerIdData; readonly nextIndex: number } => {
  const classIdAndNextIndex: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(index, binary);
  const questionIdAndNextIndex: { readonly result: QuestionId; readonly nextIndex: number } = QuestionId.codec.decode(classIdAndNextIndex.nextIndex, binary);
  const answerStudentIdAndNextIndex: { readonly result: AccountId; readonly nextIndex: number } = AccountId.codec.decode(questionIdAndNextIndex.nextIndex, binary);
  return { result: { classId: classIdAndNextIndex.result, questionId: questionIdAndNextIndex.result, answerStudentId: answerStudentIdAndNextIndex.result }, nextIndex: answerStudentIdAndNextIndex.nextIndex };
} } };


/**
 * 生徒が答えた確定済みの回答
 * @typePartId d5e1f676bc1550e196892116141b7cb7
 */
export const ConfirmedAnswer: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<ConfirmedAnswer>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: ConfirmedAnswer) => ConfirmedAnswer } = { typePartId: "d5e1f676bc1550e196892116141b7cb7" as TypePartId, helper: (confirmedAnswer: ConfirmedAnswer): ConfirmedAnswer => confirmedAnswer, codec: { encode: (value: ConfirmedAnswer): ReadonlyArray<number> => (QuestionId.codec.encode(value.questionId).concat(String.codec.encode(value.answer))), decode: (index: number, binary: Uint8Array): { readonly result: ConfirmedAnswer; readonly nextIndex: number } => {
  const questionIdAndNextIndex: { readonly result: QuestionId; readonly nextIndex: number } = QuestionId.codec.decode(index, binary);
  const answerAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(questionIdAndNextIndex.nextIndex, binary);
  return { result: { questionId: questionIdAndNextIndex.result, answer: answerAndNextIndex.result }, nextIndex: answerAndNextIndex.nextIndex };
} } };


/**
 * @typePartId daa5e4c4cd13d4fc2f087ab5532e9639
 */
export const Bool: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<Bool>; readonly False: Bool; readonly True: Bool } = { False: false, True: true, typePartId: "daa5e4c4cd13d4fc2f087ab5532e9639" as TypePartId, codec: { encode: (value: Bool): ReadonlyArray<number> => [value?1:0], decode: (index: number, binary: Uint8Array): { readonly result: Bool; readonly nextIndex: number } => {
  const patternIndex: { readonly result: number; readonly nextIndex: number } = Int32.codec.decode(index, binary);
  if (patternIndex.result === 0) {
    return { result: Bool.False, nextIndex: patternIndex.nextIndex };
  }
  if (patternIndex.result === 1) {
    return { result: Bool.True, nextIndex: patternIndex.nextIndex };
  }
  throw new Error("存在しないパターンを指定された 型を更新してください");
} } };


/**
 * 質問を編集するときのパラメータ
 * @typePartId db01aebce8186d3f5913cacd45b46518
 */
export const EditQuestionParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<EditQuestionParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: EditQuestionParameter) => EditQuestionParameter } = { typePartId: "db01aebce8186d3f5913cacd45b46518" as TypePartId, helper: (editQuestionParameter: EditQuestionParameter): EditQuestionParameter => editQuestionParameter, codec: { encode: (value: EditQuestionParameter): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(QuestionId.codec.encode(value.questionId)).concat(String.codec.encode(value.name)).concat(Option.codec(QuestionId.codec).encode(value.parentId))), decode: (index: number, binary: Uint8Array): { readonly result: EditQuestionParameter; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const questionIdAndNextIndex: { readonly result: QuestionId; readonly nextIndex: number } = QuestionId.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  const nameAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(questionIdAndNextIndex.nextIndex, binary);
  const parentIdAndNextIndex: { readonly result: Option<QuestionId>; readonly nextIndex: number } = Option.codec(QuestionId.codec).decode(nameAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, questionId: questionIdAndNextIndex.result, name: nameAndNextIndex.result, parentId: parentIdAndNextIndex.result }, nextIndex: parentIdAndNextIndex.nextIndex };
} } };


/**
 * アカウントトークンのハッシュ値. データベースに保存する用
 * @typePartId db380c6ac2db887ce3224266cf646cb3
 */
export const AccountTokenHashValue: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AccountTokenHashValue>; 
/**
 * 文字列から変換する
 */
readonly fromString: (a: string) => AccountTokenHashValue } = { typePartId: "db380c6ac2db887ce3224266cf646cb3" as TypePartId, codec: { encode: (value: AccountTokenHashValue): ReadonlyArray<number> => (encodeToken(value)), decode: (index: number, binary: Uint8Array): { readonly result: AccountTokenHashValue; readonly nextIndex: number } => (decodeToken(index, binary) as { readonly result: AccountTokenHashValue; readonly nextIndex: number }) }, fromString: (str: string): AccountTokenHashValue => (str as AccountTokenHashValue) };


/**
 * @typePartId dc8aedd2ba2bf6afa73b7d854cd1b45e
 */
export const AccountToken: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AccountToken>; 
/**
 * 文字列から変換する
 */
readonly fromString: (a: string) => AccountToken } = { typePartId: "dc8aedd2ba2bf6afa73b7d854cd1b45e" as TypePartId, codec: { encode: (value: AccountToken): ReadonlyArray<number> => (encodeToken(value)), decode: (index: number, binary: Uint8Array): { readonly result: AccountToken; readonly nextIndex: number } => (decodeToken(index, binary) as { readonly result: AccountToken; readonly nextIndex: number }) }, fromString: (str: string): AccountToken => (str as AccountToken) };


/**
 * フィードバックのID.
 * 1つの回答に対する複数のフィードバック
 * @typePartId ddc436ab9f9477953f7f5fdf6b5fe8cc
 */
export const FeedbackId: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<FeedbackId>; 
/**
 * 文字列から変換する
 */
readonly fromString: (a: string) => FeedbackId } = { typePartId: "ddc436ab9f9477953f7f5fdf6b5fe8cc" as TypePartId, codec: { encode: (value: FeedbackId): ReadonlyArray<number> => (encodeId(value)), decode: (index: number, binary: Uint8Array): { readonly result: FeedbackId; readonly nextIndex: number } => (decodeId(index, binary) as { readonly result: FeedbackId; readonly nextIndex: number }) }, fromString: (str: string): FeedbackId => (str as FeedbackId) };


/**
 * @typePartId e0d22ba37d182c0def8905e0dd44b56a
 */
export const AccountId: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AccountId>; 
/**
 * 文字列から変換する
 */
readonly fromString: (a: string) => AccountId } = { typePartId: "e0d22ba37d182c0def8905e0dd44b56a" as TypePartId, codec: { encode: (value: AccountId): ReadonlyArray<number> => (encodeId(value)), decode: (index: number, binary: Uint8Array): { readonly result: AccountId; readonly nextIndex: number } => (decodeId(index, binary) as { readonly result: AccountId; readonly nextIndex: number }) }, fromString: (str: string): AccountId => (str as AccountId) };


/**
 * questの クラス
 * @typePartId e66d2a5734b3ca58faca10d9a72dbf72
 */
export const AdminClass: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AdminClass>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: AdminClass) => AdminClass } = { typePartId: "e66d2a5734b3ca58faca10d9a72dbf72" as TypePartId, helper: (adminClass: AdminClass): AdminClass => adminClass, codec: { encode: (value: AdminClass): ReadonlyArray<number> => (ClassId.codec.encode(value.id).concat(String.codec.encode(value.name)).concat(ProgramId.codec.encode(value.programId)).concat(StudentClassInvitationToken.codec.encode(value.studentInvitationToken))), decode: (index: number, binary: Uint8Array): { readonly result: AdminClass; readonly nextIndex: number } => {
  const idAndNextIndex: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(index, binary);
  const nameAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(idAndNextIndex.nextIndex, binary);
  const programIdAndNextIndex: { readonly result: ProgramId; readonly nextIndex: number } = ProgramId.codec.decode(nameAndNextIndex.nextIndex, binary);
  const studentInvitationTokenAndNextIndex: { readonly result: StudentClassInvitationToken; readonly nextIndex: number } = StudentClassInvitationToken.codec.decode(programIdAndNextIndex.nextIndex, binary);
  return { result: { id: idAndNextIndex.result, name: nameAndNextIndex.result, programId: programIdAndNextIndex.result, studentInvitationToken: studentInvitationTokenAndNextIndex.result }, nextIndex: studentInvitationTokenAndNextIndex.nextIndex };
} } };


/**
 * @typePartId ed19a165de909edd77618b1e45f31933
 */
export const TypePartId: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<TypePartId>; 
/**
 * 文字列から変換する
 */
readonly fromString: (a: string) => TypePartId } = { typePartId: "ed19a165de909edd77618b1e45f31933" as TypePartId, codec: { encode: (value: TypePartId): ReadonlyArray<number> => (encodeId(value)), decode: (index: number, binary: Uint8Array): { readonly result: TypePartId; readonly nextIndex: number } => (decodeId(index, binary) as { readonly result: TypePartId; readonly nextIndex: number }) }, fromString: (str: string): TypePartId => (str as TypePartId) };


/**
 * 生徒(質問を答え, フィードバックするひと) としてクラスに参加するためのパラメータ
 * @typePartId f15b8d36ac1436b4212c0d25613c99c0
 */
export const JoinClassAsStudentParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<JoinClassAsStudentParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: JoinClassAsStudentParameter) => JoinClassAsStudentParameter } = { typePartId: "f15b8d36ac1436b4212c0d25613c99c0" as TypePartId, helper: (joinClassAsStudentParameter: JoinClassAsStudentParameter): JoinClassAsStudentParameter => joinClassAsStudentParameter, codec: { encode: (value: JoinClassAsStudentParameter): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(StudentClassInvitationToken.codec.encode(value.classInvitationToken))), decode: (index: number, binary: Uint8Array): { readonly result: JoinClassAsStudentParameter; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const classInvitationTokenAndNextIndex: { readonly result: StudentClassInvitationToken; readonly nextIndex: number } = StudentClassInvitationToken.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, classInvitationToken: classInvitationTokenAndNextIndex.result }, nextIndex: classInvitationTokenAndNextIndex.nextIndex };
} } };


/**
 * 他の生徒の回答
 * @typePartId f175351a9bf7d3ba293a525a1b20f08f
 */
export const AnswersFromOtherStudent: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AnswersFromOtherStudent>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: AnswersFromOtherStudent) => AnswersFromOtherStudent } = { typePartId: "f175351a9bf7d3ba293a525a1b20f08f" as TypePartId, helper: (answersFromOtherStudent: AnswersFromOtherStudent): AnswersFromOtherStudent => answersFromOtherStudent, codec: { encode: (value: AnswersFromOtherStudent): ReadonlyArray<number> => (AccountId.codec.encode(value.studentId).concat(String.codec.encode(value.answerText))), decode: (index: number, binary: Uint8Array): { readonly result: AnswersFromOtherStudent; readonly nextIndex: number } => {
  const studentIdAndNextIndex: { readonly result: AccountId; readonly nextIndex: number } = AccountId.codec.decode(index, binary);
  const answerTextAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(studentIdAndNextIndex.nextIndex, binary);
  return { result: { studentId: studentIdAndNextIndex.result, answerText: answerTextAndNextIndex.result }, nextIndex: answerTextAndNextIndex.nextIndex };
} } };


/**
 * @typePartId f2c5ecf28ee97364a0a738490f09de29
 */
export const Feedback: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<Feedback>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: Feedback) => Feedback } = { typePartId: "f2c5ecf28ee97364a0a738490f09de29" as TypePartId, helper: (feedback: Feedback): Feedback => feedback, codec: { encode: (value: Feedback): ReadonlyArray<number> => (AccountId.codec.encode(value.accountId).concat(String.codec.encode(value.message)).concat(DateTime.codec.encode(value.createDateTime)).concat(FeedbackId.codec.encode(value.id))), decode: (index: number, binary: Uint8Array): { readonly result: Feedback; readonly nextIndex: number } => {
  const accountIdAndNextIndex: { readonly result: AccountId; readonly nextIndex: number } = AccountId.codec.decode(index, binary);
  const messageAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(accountIdAndNextIndex.nextIndex, binary);
  const createDateTimeAndNextIndex: { readonly result: DateTime; readonly nextIndex: number } = DateTime.codec.decode(messageAndNextIndex.nextIndex, binary);
  const idAndNextIndex: { readonly result: FeedbackId; readonly nextIndex: number } = FeedbackId.codec.decode(createDateTimeAndNextIndex.nextIndex, binary);
  return { result: { accountId: accountIdAndNextIndex.result, message: messageAndNextIndex.result, createDateTime: createDateTimeAndNextIndex.result, id: idAndNextIndex.result }, nextIndex: idAndNextIndex.nextIndex };
} } };


/**
 * フィードバックを追加する
 * @typePartId f8d4a640f7f6a2087fb6dd5f905aa0fd
 */
export const AddFeedbackParameter: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<AddFeedbackParameter>; 
/**
 * 型を合わせる上で便利なヘルパー関数
 */
readonly helper: (a: AddFeedbackParameter) => AddFeedbackParameter } = { typePartId: "f8d4a640f7f6a2087fb6dd5f905aa0fd" as TypePartId, helper: (addFeedbackParameter: AddFeedbackParameter): AddFeedbackParameter => addFeedbackParameter, codec: { encode: (value: AddFeedbackParameter): ReadonlyArray<number> => (AccountToken.codec.encode(value.accountToken).concat(QuestionId.codec.encode(value.questionId)).concat(ClassId.codec.encode(value.classId)).concat(AccountId.codec.encode(value.answerStudentId)).concat(String.codec.encode(value.message))), decode: (index: number, binary: Uint8Array): { readonly result: AddFeedbackParameter; readonly nextIndex: number } => {
  const accountTokenAndNextIndex: { readonly result: AccountToken; readonly nextIndex: number } = AccountToken.codec.decode(index, binary);
  const questionIdAndNextIndex: { readonly result: QuestionId; readonly nextIndex: number } = QuestionId.codec.decode(accountTokenAndNextIndex.nextIndex, binary);
  const classIdAndNextIndex: { readonly result: ClassId; readonly nextIndex: number } = ClassId.codec.decode(questionIdAndNextIndex.nextIndex, binary);
  const answerStudentIdAndNextIndex: { readonly result: AccountId; readonly nextIndex: number } = AccountId.codec.decode(classIdAndNextIndex.nextIndex, binary);
  const messageAndNextIndex: { readonly result: String; readonly nextIndex: number } = String.codec.decode(answerStudentIdAndNextIndex.nextIndex, binary);
  return { result: { accountToken: accountTokenAndNextIndex.result, questionId: questionIdAndNextIndex.result, classId: classIdAndNextIndex.result, answerStudentId: answerStudentIdAndNextIndex.result, message: messageAndNextIndex.result }, nextIndex: messageAndNextIndex.nextIndex };
} } };


/**
 * @typePartId fc3e89643aabfa642a21562a55be7f00
 */
export const Result: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: <okValue extends unknown, errorValue extends unknown>(a: Codec<okValue>, b: Codec<errorValue>) => Codec<Result<okValue, errorValue>>; readonly Ok: <okValue extends unknown, errorValue extends unknown>(a: okValue) => Result<okValue, errorValue>; readonly Error: <okValue extends unknown, errorValue extends unknown>(a: errorValue) => Result<okValue, errorValue> } = { Ok: <okValue extends unknown, errorValue extends unknown>(okValue: okValue): Result<okValue, errorValue> => ({ _: "Ok", okValue }), Error: <okValue extends unknown, errorValue extends unknown>(errorValue: errorValue): Result<okValue, errorValue> => ({ _: "Error", errorValue }), typePartId: "fc3e89643aabfa642a21562a55be7f00" as TypePartId, codec: <okValue extends unknown, errorValue extends unknown>(okValueCodec: Codec<okValue>, errorValueCodec: Codec<errorValue>): Codec<Result<okValue, errorValue>> => ({ encode: (value: Result<okValue, errorValue>): ReadonlyArray<number> => {
  switch (value._) {
    case "Ok": {
      return [0].concat(okValueCodec.encode(value.okValue));
    }
    case "Error": {
      return [1].concat(errorValueCodec.encode(value.errorValue));
    }
  }
}, decode: (index: number, binary: Uint8Array): { readonly result: Result<okValue, errorValue>; readonly nextIndex: number } => {
  const patternIndex: { readonly result: number; readonly nextIndex: number } = Int32.codec.decode(index, binary);
  if (patternIndex.result === 0) {
    const result: { readonly result: okValue; readonly nextIndex: number } = okValueCodec.decode(patternIndex.nextIndex, binary);
    return { result: Result.Ok(result.result), nextIndex: result.nextIndex };
  }
  if (patternIndex.result === 1) {
    const result: { readonly result: errorValue; readonly nextIndex: number } = errorValueCodec.decode(patternIndex.nextIndex, binary);
    return { result: Result.Error(result.result), nextIndex: result.nextIndex };
  }
  throw new Error("存在しないパターンを指定された 型を更新してください");
} }) };


/**
 * @typePartId fc44e7c43fc49d64473e6b1efa7589e2
 */
export const ClassId: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<ClassId>; 
/**
 * 文字列から変換する
 */
readonly fromString: (a: string) => ClassId } = { typePartId: "fc44e7c43fc49d64473e6b1efa7589e2" as TypePartId, codec: { encode: (value: ClassId): ReadonlyArray<number> => (encodeId(value)), decode: (index: number, binary: Uint8Array): { readonly result: ClassId; readonly nextIndex: number } => (decodeId(index, binary) as { readonly result: ClassId; readonly nextIndex: number }) }, fromString: (str: string): ClassId => (str as ClassId) };


/**
 * @typePartId fcb5274a1228c7dc890710bed16a3051
 */
export const ProgramId: { 
/**
 * definy.app 内 の 型パーツの Id
 */
readonly typePartId: TypePartId; 
/**
 * 独自のバイナリ形式の変換処理ができるコーデック
 */
readonly codec: Codec<ProgramId>; 
/**
 * 文字列から変換する
 */
readonly fromString: (a: string) => ProgramId } = { typePartId: "fcb5274a1228c7dc890710bed16a3051" as TypePartId, codec: { encode: (value: ProgramId): ReadonlyArray<number> => (encodeId(value)), decode: (index: number, binary: Uint8Array): { readonly result: ProgramId; readonly nextIndex: number } => (decodeId(index, binary) as { readonly result: ProgramId; readonly nextIndex: number }) }, fromString: (str: string): ProgramId => (str as ProgramId) };



